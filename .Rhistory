source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2)
ngroups=50
burnin=ngibbs/2
t.xmat=t(xmat)
xtx=t.xmat%*%xmat
#useful stuff
nloc=nrow(y)
nspp=ncol(y)
nparam=ncol(xmat)
gamma.possib=seq(from=0.1,to=1,by=0.05)
#get invSigma, Sigma, lds for different values of n_k
InvSigma.precalc=xtx+diag(1,nparam)
Sigma.precalc=solve(InvSigma.precalc)
lds=determinant(Sigma.precalc)$modulus[1] #log of determinant of covariance matrix
#initial parameter values
betas=matrix(0,nparam,ngroups)
alpha=rep(0,nspp)
omega=matrix(-1,nloc,nspp)
omega[y==1]=1
cs=sample(1:ngroups,size=nspp,replace=T)
theta=rep(1/ngroups,ngroups)
gamma=0.1
#gibbs stuff
vec.betas=matrix(NA,ngibbs,nparam*ngroups)
vec.alpha=matrix(NA,ngibbs,nspp)
vec.theta=matrix(NA,ngibbs,ngroups)
vec.logl=matrix(NA,ngibbs,1)
vec.gamma=rep(NA,ngibbs,1)
vec.cs=matrix(NA,ngibbs,nspp)
i=1
print(i)
cs=sample.cs(ngroups=ngroups,omega=omega,xmat=xmat,alpha=alpha,betas=betas,theta=theta,
nspp=nspp,nloc=nloc,InvSigma.precalc=InvSigma.precalc,
Sigma.precalc=Sigma.precalc,lds=lds,cs=cs,nparam=nparam)
# cs=cs.true
betas=sample.betas(ngroups=ngroups,cs=cs,nparam=nparam,xtx=xtx,t.xmat=t.xmat,alpha=alpha,
nloc=nloc,nspp=nspp,omega=omega)
# betas=cbind(betas.true,matrix(0,nparam,ngroups-ncol(betas.true)))
omega=sample.omega(y=y,nspp=nspp,nloc=nloc,xmat=xmat,betas=betas,cs=cs,alpha=alpha)
# omega=omega.true
alpha=sample.alpha(nloc=nloc,xmat=xmat,betas=betas,omega=omega,cs=cs,nspp=nspp)
# alpha=alpha.true
tmp=sample.theta(cs=cs,ngroups=ngroups,gamma=gamma,burnin=burnin,gibbs.step=i,
betas=betas,theta=theta)
betas=tmp$betas
cs=tmp$cs
theta=tmp$theta
v=tmp$v[-ngroups]
# theta=rep(1/ngroups,ngroups)
gamma=sample.gamma(v=v,ngroups=ngroups,gamma.possib=gamma.possib)
logl=get.logl(y=y,omega=omega,nspp=nspp,nloc=nloc,xmat=xmat,betas=betas,cs=cs,alpha=alpha)
#store results
vec.betas[i,]=betas
vec.alpha[i,]=alpha
vec.theta[i,]=theta
vec.logl[i]=logl
vec.cs[i,]=cs
vec.gamma[i]=gamma
q1=nloc*log(2*pi)
alpha1=matrix(alpha,nloc,nspp,byrow=T)
err=omega-alpha1
q2s=colSums(err^2)
ltheta=log(theta)
q3k=-2*ltheta
q4s=t(xmat)%*%err
resto.media=xmat%*%betas
#for each species
for (i in 1:nspp){
#lprob if group exists
omega1=matrix(omega[,i],nloc,ngroups)
media1=alpha[i]+resto.media
lprob.exist=colSums(dnorm(omega1,mean=media1,sd=1,log=T))+ltheta
#lprob if group does not exist
p1=q1
p2=q2s[i]
mu=Sigma.precalc%*%q4s[,i]
p3=-t(mu)%*%InvSigma.precalc%*%mu; p3=as.numeric(p3)
p4=-lds
p5=q3k
lprob.not.exist=-(1/2)*(p1+p2+p3+p4+p5)
#which groups exist and which don't?
tab=rep(0,ngroups)
tmp=table(cs)
tab[as.numeric(names(tmp))]=tmp
#get probabilities for each group
lprob=rep(NA,ngroups)
cond=tab==0
lprob[ cond]=lprob.not.exist[cond]
lprob[!cond]=lprob.exist[!cond]
#normalize probabilities
max1=max(lprob)
tmp=lprob-max1
tmp1=exp(tmp)
prob=tmp1/sum(tmp1)
#sample cs
ind=rmultinom(1,size=1,prob)
ind1=which(ind==1)
cs[i]=ind1
}
cs
i=1
omega1=matrix(omega[,i],nloc,ngroups)
media1=alpha[i]+resto.media
lprob.exist=colSums(dnorm(omega1,mean=media1,sd=1,log=T))+ltheta
#lprob if group does not exist
p1=q1
p2=q2s[i]
mu=Sigma.precalc%*%q4s[,i]
p3=-t(mu)%*%InvSigma.precalc%*%mu; p3=as.numeric(p3)
p4=-lds
p5=q3k
lprob.not.exist=-(1/2)*(p1+p2+p3+p4+p5)
#which groups exist and which don't?
tab=rep(0,ngroups)
tmp=table(cs)
tab[as.numeric(names(tmp))]=tmp
#get probabilities for each group
lprob=rep(NA,ngroups)
cond=tab==0
lprob[ cond]=lprob.not.exist[cond]
lprob[!cond]=lprob.exist[!cond]
#normalize probabilities
max1=max(lprob)
tmp=lprob-max1
tmp1=exp(tmp)
prob=tmp1/sum(tmp1)
#sample cs
ind=rmultinom(1,size=1,prob)
ind1=which(ind==1)
cs[i]=ind1
nspp
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
gamma1=0.1
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2,
gamma=gamma1)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
gamma1=0.1
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
ngroups=50
burnin=ngibbs/2
t.xmat=t(xmat)
xtx=t.xmat%*%xmat
#useful stuff
nloc=nrow(y)
nspp=ncol(y)
nparam=ncol(xmat)
gamma.possib=seq(from=0.1,to=1,by=0.05)
#get invSigma, Sigma, lds for different values of n_k
InvSigma.precalc=xtx+diag(1,nparam)
Sigma.precalc=solve(InvSigma.precalc)
lds=determinant(Sigma.precalc)$modulus[1] #log of determinant of covariance matrix
#initial parameter values
betas=matrix(0,nparam,ngroups)
alpha=rep(0,nspp)
omega=matrix(-1,nloc,nspp)
omega[y==1]=1
cs=sample(1:ngroups,size=nspp,replace=T)
theta=rep(1/ngroups,ngroups)
#gibbs stuff
vec.betas=matrix(NA,ngibbs,nparam*ngroups)
vec.alpha=matrix(NA,ngibbs,nspp)
vec.theta=matrix(NA,ngibbs,ngroups)
vec.logl=matrix(NA,ngibbs,1)
vec.gamma=rep(NA,ngibbs,1)
vec.cs=matrix(NA,ngibbs,nspp)
betas=sample.betas(ngroups=ngroups,cs=cs,nparam=nparam,xtx=xtx,t.xmat=t.xmat,alpha=alpha,
nloc=nloc,nspp=nspp,omega=omega)
# betas=cbind(betas.true,matrix(0,nparam,ngroups-ncol(betas.true)))
omega=sample.omega(y=y,nspp=nspp,nloc=nloc,xmat=xmat,betas=betas,cs=cs,alpha=alpha)
# omega=omega.true
alpha=sample.alpha(nloc=nloc,xmat=xmat,betas=betas,omega=omega,cs=cs,nspp=nspp)
# alpha=alpha.true
theta=sample.theta(cs=cs,ngroups=ngroups,gamma=gamma,betas=betas)
n=rep(0,ngroups)
tmp=table(cs)
n[as.numeric(names(tmp))]=tmp
v=theta=rep(NA,ngroups)
prod=1
for (i in 1:(ngroups-1)){
n.greater.k=n[-(1:i)]
v[i]=rbeta(1,n[i]+1,sum(n.greater.k)+gamma)
theta[i]=v[i]*prod
prod=prod*(1-v[i])
}
sum(n.greater.k)
gamma
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
gamma1=0.1
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
ngroups=50
burnin=ngibbs/2
t.xmat=t(xmat)
xtx=t.xmat%*%xmat
#useful stuff
nloc=nrow(y)
nspp=ncol(y)
nparam=ncol(xmat)
gamma.possib=seq(from=0.1,to=1,by=0.05)
#get invSigma, Sigma, lds for different values of n_k
InvSigma.precalc=xtx+diag(1,nparam)
Sigma.precalc=solve(InvSigma.precalc)
lds=determinant(Sigma.precalc)$modulus[1] #log of determinant of covariance matrix
#initial parameter values
betas=matrix(0,nparam,ngroups)
alpha=rep(0,nspp)
omega=matrix(-1,nloc,nspp)
omega[y==1]=1
cs=sample(1:ngroups,size=nspp,replace=T)
theta=rep(1/ngroups,ngroups)
#gibbs stuff
vec.betas=matrix(NA,ngibbs,nparam*ngroups)
vec.alpha=matrix(NA,ngibbs,nspp)
vec.theta=matrix(NA,ngibbs,ngroups)
vec.logl=matrix(NA,ngibbs,1)
vec.gamma=rep(NA,ngibbs,1)
vec.cs=matrix(NA,ngibbs,nspp)
betas=sample.betas(ngroups=ngroups,cs=cs,nparam=nparam,xtx=xtx,t.xmat=t.xmat,alpha=alpha,
nloc=nloc,nspp=nspp,omega=omega)
# betas=cbind(betas.true,matrix(0,nparam,ngroups-ncol(betas.true)))
omega=sample.omega(y=y,nspp=nspp,nloc=nloc,xmat=xmat,betas=betas,cs=cs,alpha=alpha)
# omega=omega.true
alpha=sample.alpha(nloc=nloc,xmat=xmat,betas=betas,omega=omega,cs=cs,nspp=nspp)
# alpha=alpha.true
theta=sample.theta(cs=cs,ngroups=ngroups,gamma1=gamma1,betas=betas)
theta
p1=nloc*log(2*pi)
alpha1=matrix(alpha,nloc,nspp,byrow=T)
err=omega-alpha1
p2s=colSums(err^2)
ltheta=log(theta)
q4s=t(xmat)%*%err
resto.media=xmat%*%betas
mu=Sigma.precalc%*%q4s
p3s=-t(mu)%*%InvSigma.precalc%*%mu; p3=as.numeric(p3)
p1=nloc*log(2*pi)
alpha1=matrix(alpha,nloc,nspp,byrow=T)
err=omega-alpha1
p2s=colSums(err^2)
ltheta=log(theta)
q4s=t(xmat)%*%err
resto.media=xmat%*%betas
mu=Sigma.precalc%*%q4s
p3s=-t(mu)%*%InvSigma.precalc%*%mu;
dim(mu)
dim(p3s)
p3s=-t(mu)%*%InvSigma.precalc%*%mu;
p3s=as.numeric(sum(diag(p3s)))
p3s[1:5]
q4s=t(xmat)%*%err
resto.media=xmat%*%betas
mu=Sigma.precalc%*%q4s
p3s=-t(mu)%*%InvSigma.precalc%*%mu;
diag(p3s)
p3s=as.numeric(diag(p3s))
p3s
p3s[1:5]
mu=Sigma.precalc%*%q4s[,1]
-t(mu)%*%InvSigma.precalc%*%mu
mu=Sigma.precalc%*%q4s[,3]
-t(mu)%*%InvSigma.precalc%*%mu
mu=Sigma.precalc%*%q4s[,5]
-t(mu)%*%InvSigma.precalc%*%mu
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
gamma1=0.1
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2,
gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
gamma1=0.1
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2,
gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=1000
gamma1=0.1
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2,
gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=100
gamma1=0.1
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2,
gamma1=gamma1)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=100#0
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=100#0
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2)
rm(list=ls(all=TRUE))
set.seed(2)
library('mvtnorm')
library('Rcpp')
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
source('gibbs functions.R')
sourceCpp('aux1.cpp')
source('gibbs clust response curve gamma.R')
ngroups=32
ngibbs=100#0
nome=paste0('fake ',c('data ','xmat '),'sim ',ngroups,'ng','.csv')
y=data.matrix(read.csv(nome[1],as.is=T))
xmat=data.matrix(read.csv(nome[2],as.is=T))
res=gibbs.clust.response.curve(y=y,xmat=xmat,ngroups=50,
ngibbs=ngibbs,burnin=ngibbs/2)
theta.estim=res$theta[nrow(res$theta),]
plot(theta.estim,type='h')
sum(theta.estim>0.005)
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
alpha.true=read.csv('fake alpha sim 32ng.csv',as.is=T)
betas.true=read.csv('fake betas sim 32ng.csv',as.is=T)
cs.true=read.csv('fake cs sim 32ng.csv',as.is=T)
cs.estim=res$cs[nrow(res$cs),]
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
alpha.true=read.csv('fake alpha sim 32ng.csv',as.is=T)
betas.true=read.csv('fake betas sim 32ng.csv',as.is=T)
cs.true=read.csv('fake cs sim 32ng.csv',as.is=T)
head(cs.true)
combo=data.frame(true=cs.true,estim=cs.estim)
table(combo)
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
alpha.true=read.csv('fake alpha sim 32ng.csv',as.is=T)
betas.true=read.csv('fake betas sim 32ng.csv',as.is=T)
cs.true=read.csv('fake cs sim 32ng.csv',as.is=T)$x
combo=data.frame(true=cs.true,estim=cs.estim)
z=table(combo)
ind=numeric()
for (i in 1:nrow(z)){
tmp=which(z[i,]==max(z[i,]))
ind=c(ind,colnames(z)[tmp])
}
ind
theta.estim=res$theta[nrow(res$theta),]
plot(theta.estim,type='h')
sum(theta.estim>0.005)
cs.estim=res$cs[nrow(res$cs),]
betas.estim=res$betas[nrow(res$betas),]
alpha.estim=res$alpha[nrow(res$alpha),]
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
alpha.true=read.csv('fake alpha sim 32ng.csv',as.is=T)
betas.true=read.csv('fake betas sim 32ng.csv',as.is=T)
cs.true=read.csv('fake cs sim 32ng.csv',as.is=T)$x
plot(alpha.true,alpha.estim)
head(alpha.true)
alpha.true=read.csv('fake alpha sim 32ng.csv',as.is=T)$x
plot(alpha.true,alpha.estim)
combo=data.frame(true=cs.true,estim=cs.estim)
z=table(combo)
ind=numeric()
for (i in 1:nrow(z)){
tmp=which(z[i,]==max(z[i,]))
ind=c(ind,colnames(z)[tmp])
}
compare(betas.estim[,ind],betas.true)
plot(betas.estim[,ind],betas.true)
length(ind)
betas.estim=matrix(res$betas[nrow(res$betas),],6,50)
plot(betas.estim[,ind],betas.true)
dim(betas.estim)
plot(betas.estim[,as.numeric(ind)],betas.true)
dim(betas.true)
length(ind)
theta.estim=res$theta[nrow(res$theta),]
plot(theta.estim,type='h')
sum(theta.estim>0.005)
cs.estim=res$cs[nrow(res$cs),]
betas.estim=matrix(res$betas[nrow(res$betas),],6,50)
alpha.estim=res$alpha[nrow(res$alpha),]
setwd('U:\\GIT_models\\git_cluster_rcurve_gamma')
alpha.true=read.csv('fake alpha sim 32ng.csv',as.is=T)$x
betas.true=read.csv('fake betas sim 32ng.csv',as.is=T)
cs.true=read.csv('fake cs sim 32ng.csv',as.is=T)$x
plot(alpha.true,alpha.estim)
combo=data.frame(true=cs.true,estim=cs.estim)
z=table(combo)
ind=numeric()
for (i in 1:nrow(z)){
tmp=which(z[i,]==max(z[i,]))
ind=c(ind,colnames(z)[tmp])
}
plot(betas.estim[,as.numeric(ind)],betas.true)
as.numeric(ind)
dim(betas.estim[,as.numeric(ind)])
dim(betas.true)
plot(betas.estim[,as.numeric(ind)],data.matrix(betas.true))
